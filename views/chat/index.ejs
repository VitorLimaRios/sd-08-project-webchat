<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Web chat</title>
  <link rel="stylesheet" href="/css/chat.css">
</head>
<body>
  <label class="menu-icon" for="toggle-menu">&#9776; Menu</label>
  <input type="checkbox" id="toggle-menu" class="toogle">
  <main>
    <div class="left-content">
      <label class="nickname-label">
        <input type="text" class="nickname" data-testid="nickname-box" 
        placeholder="Change your nickname">
        <button class="btn-save-nick" data-testid="nickname-button">save</button>
      </label>
      <div class="users">
        <p class='username' data-testid="online-user">
          <%= name %> 
        </p>
        <ul class="userlist"></ul>
      </div>
      
    </div>
    <div class="right-content">
      <ul class="web-chat">
        <% messages.map(({nickname, chatMessage, timestamp}) => { %>
          <li data-testid="message" class="message">
            <p class="message-nickname"> <%= nickname %> </p>
            <p> <%= chatMessage %> </p>
            <p class="message-timestamp"> <%= timestamp %> </p>
          </li>
        <% }) %>
      </ul>
      <div class="send-container"> 
        <textarea class="write-message" data-testid="message-box" ></textarea>
        <button class="send-message-btn" data-testid="send-button" >Enviar</button>
      </div>
    </div>
  </main>
</body>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  const getDate = () => {
      const date = new Date();
      const day = date.getDate();
      const month = (date.getMonth() + 1);
      const year = date.getFullYear();
      const hours = date.getHours();
      const minutes = date.getMinutes();
      const seconds = date.getSeconds();
      
      const incZero = (n) => (n < 10 ? `0${n}` : n); 

      const dateNow = `${incZero(day)}-${incZero(month)}-${year}`;
      const timeNow = `${hours}:${incZero(minutes)}:${incZero(seconds)}`;

      const timestamp = `${dateNow} ${timeNow}`;

      return timestamp;
  };

  const inputMessage = document.querySelector('.write-message');
  const btnSendMessage = document.querySelector('.send-message-btn');
  const nicknameInput = document.querySelector('.nickname');
  const userName = document.querySelector('.username');
  const btnSetUsername = document.querySelector('.btn-save-nick');

  const sendMember = () => {
    const nickname = userName.innerText;

    const userData = {
      nickname,
    };

    socket.emit('userConnected', userData);
  };

  sendMember();

  const sendMessage = () => {
    const nickname = userName.innerText;
    const chatMessage = inputMessage.value;

    inputMessage.value = '';

    const ulChat = document.querySelector('.web-chat');
    
    const li = document.createElement('li');

    // const nicknameSpan = document.createElement('p');
    const messageParagraph = document.createElement('p');
    const timestampSpan = document.createElement('p');

    messageParagraph.innerText = chatMessage;
    timestampSpan.innerText = getDate();

    timestampSpan.classList.add('message-timestamp');

    li.appendChild(messageParagraph);
    li.appendChild(timestampSpan);

    li.setAttribute('data-testid', 'message');
    li.classList.add('message', 'right');
    
    ulChat.appendChild(li);

    socket.emit('message', { nickname, chatMessage });
  };

  const setUserName = () => {    
    userName.innerText = nicknameInput.value;

    nicknameInput.value = '';

    sendMember();
  };

  btnSendMessage.addEventListener('click', sendMessage);
  btnSetUsername.addEventListener('click', setUserName);

  socket.on('message', (message) => {
    const ulChat = document.querySelector('.web-chat');
    
    const li = document.createElement('li');

    const nicknameSpan = document.createElement('p');
    const messageParagraph = document.createElement('p');
    const timestampSpan = document.createElement('p');

    nicknameSpan.innerText = message.nickname;
    messageParagraph.innerText = message.chatMessage;
    timestampSpan.innerText = message.timestamp;

    nicknameSpan.classList.add('message-nickname');
    timestampSpan.classList.add('message-timestamp');

    li.appendChild(nicknameSpan);
    li.appendChild(messageParagraph);
    li.appendChild(timestampSpan);

    li.setAttribute('data-testid', 'message');
    li.classList.add('message');
    
    ulChat.appendChild(li);
  });

  socket.on('userList', (userList) => {
    const listOfUsers = document.querySelector('.userlist');
    listOfUsers.innerHTML = '';
    
    const nickname = userName.innerText;
    const everyBodyElse = userList.filter((elem) => elem.nickname !== nickname);

    everyBodyElse.forEach((user) => {
      const li = document.createElement('li');
      li.innerText = user.nickname;
      li.setAttribute('data-testid', 'online-user');
      li.classList.add('username');

      listOfUsers.appendChild(li);
    });
  });

  const statusMessage = (message) => {
    const ulChat = document.querySelector('.web-chat');
    const li = document.createElement('li');
    li.innerText = message

    li.classList.add('users-status-message')

    ulChat.appendChild(li)
  }

  socket.on('userChangedNickname', statusMessage)
  socket.on('newUserIn', statusMessage)
  socket.on('userJustDisconnect', statusMessage)

  window.onbeforeunload = (_event) => {
    socket.disconnect();
  };

</script>
</html>